[[plugins]] # context_filetype.vim
repo = 'Shougo/context_filetype.vim'

[[plugins]] # 補完
repo = 'Shougo/deoplete.nvim'
if = 'has("python3")'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = '''
    let g:deoplete#enable_at_startup = 1
    " let g:deoplete#enable_at_startup = 0
    let g:deoplete#enable_ignore_case = 1
    let g:deoplete#enable_smart_case = 1
    let g:deoplete#auto_complete_delay = 0
    
    call deoplete#custom#source('_', 'matchers',
      \ ['matcher_fuzzy', 'matcher_length'])
    
    " <TAB>: completion.
    imap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : deoplete#mappings#manual_complete()
    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
    endfunction

    " <S-TAB>: completion back.
    inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
'''

[[plugins]]
repo      = 'delphinus/dwm.vim'
rev       = 'feature/disable'
on_map    = ['<Plug>DWM']
hook_add  = ''' "{{{
  function! s:dwm_reset_pane_width() abort
    if !exists('*DWM_ResizeMasterPaneWidth')
      return
    endif
    let half = &columns / 2
    let min_width = get(g:, 'dwm_min_master_pane_width', 9999)
    let g:dwm_master_pane_width = min([min_width, half])
    call DWM_ResizeMasterPaneWidth()
  endfunction
  function! s:dwm_disable() abort
    autocmd! dwm BufWinEnter
    augroup! dwm
  endfunction
  function! s:dwm_enable() abort
    augroup dwm
      autocmd!
      autocmd! BufWinEnter * if &buflisted || &filetype ==# 'help' | call DWM_AutoEnter() | endif
    augroup END
  endfunction
  nnoremap <C-J> <C-W>w
  nnoremap <C-K> <C-W>W
  nmap <C-S> <Plug>DWMRotateClockwise
  nmap <C-Q> <Plug>DWMRotateCounterclockwise
  nmap <C-N> <Plug>DWMNew
  "nmap <C-C> <Plug>DWMClose
  nmap <C-Space> <Plug>DWMFocus
  nmap <C-@> <Plug>DWMFocus
  nmap <C-L> <Plug>DWMGrowMaster
  command! DWMResetPaneWidth call <SID>dwm_reset_pane_width()
  command! DWMDisable call <SID>dwm_disable()
  command! DWMEnable call <SID>dwm_enable()
"}}} '''
hook_source = 'let g:dwm_min_master_pane_width = 86'

# rev = '2.1'
[[plugins]] # unite.vim 後継
repo = 'Shougo/denite.nvim'
if = 'has("python3")'
on_cmd   = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord']
hook_source = 'source ~/.config/dein/plugins/denite.rc.vim'
hook_add = '''

nnoremap <silent> [Window]s :<C-u>Denite file/point file/old
        \ -sorters=sorter/rank
        \ `finddir('.git', ';') != '' ? 'file/rec/git' : 'file/rec'`
        \ file file:new<CR>

nmap <silent> ;cb :<C-u>Denite file_mru<CR>
nmap <silent> ;cf :<C-u>Denite file/rec<CR>
nmap <silent> ;cm :<C-u>Denite menu<CR>

" denite gitstatus
nmap <silent> ;cs :<C-u>Denite gitstatus<CR>
" denite gitchanged
nmap <silent> ;cc :<C-u>Denite gitchanged<CR>
" denite 

nmap <silent> ;cs :<C-u>Denite gitstatus<CR>
" カーソル以下の単語を開いてるファイルからgrep
nnoremap <silent> ;c/ :<C-u>DeniteCursorWord grep line -buffer-name=search<CR><C-R><C-W><CR>
" 普通にgrep
nnoremap <silent> ;g :<C-u>Denite grep <CR>
" nnoremap <silent> ;g :<C-u>Denite grep -buffer-name=search-buffer-denite<CR>
" カーソル以下の単語を普通にgrep
nnoremap <silent> ;cg :<C-u>DeniteCursorWord grep -buffer-name=search-buffer-denite<CR>
" search
" nnoremap <silent> / :<C-u>Denite -buffer-name=search -auto-resize line<CR>

"" Denite rails
nnoremap <silent> ;rs :<C-u>Denite rails:spec<CR>
nnoremap <silent> ;rm :<C-u>Denite rails:model<CR>
nnoremap <silent> ;rc :<C-u>Denite rails:controller<CR>
nnoremap <silent> ;rd :<C-u>Denite rails:dwim<CR>

nnoremap <silent> ;;
        \ :<C-u>Denite command command_history<CR>

'''

  # nnoremap <silent> ;r
  #       \ :<C-u>Denite -buffer-name=register
  #       \ register neoyank<CR>
  # xnoremap <silent> ;r
  #       \ :<C-u>Denite -default-action=replace -buffer-name=register
  #       \ register neoyank<CR>
  # nnoremap <silent> [Window]<Space>
  #       \ :<C-u>Denite file/rec:~/.vim/rc<CR>
  # nnoremap <expr> / line('$') > 10000 ? '/' :
  # \ ":\<C-u>Denite -buffer-name=search -start-filter line\<CR>"
  # nnoremap <expr> n line('$') > 10000 ? 'n' :
  # \ ":\<C-u>Denite -buffer-name=search -resume -refresh -no-start-filter\<CR>"
  # nnoremap <expr> * line('$') > 10000 ? '*' :
  # \ ":\<C-u>DeniteCursorWord -buffer-name=search line\<CR>"
  # nnoremap <silent> [Window]s :<C-u>Denite file/point file/old
  #       \ -sorters=sorter/rank
  #       \ `finddir('.git', ';') != '' ? 'file/rec/git' : 'file/rec'`
  #       \ file file:new<CR>
  # nnoremap <silent><expr> tt  &filetype == 'help' ?  "g\<C-]>" :
  #       \ ":\<C-u>DeniteCursorWord -buffer-name=tag -immediately
  #       \  tag:include\<CR>"
  # nnoremap <silent><expr> tp  &filetype == 'help' ?
  #       \ ":\<C-u>pop\<CR>" : ":\<C-u>Denite jump\<CR>"
  # nnoremap <silent> [Window]n :<C-u>Denite dein<CR>
  # nnoremap <silent> [Window]g :<C-u>Denite ghq<CR>
  # nnoremap <silent> ;g :<C-u>Denite -buffer-name=search
  #       \ -no-empty grep<CR>
  # nnoremap <silent> ft :<C-u>Denite filetype<CR>
  # nnoremap <silent> <C-t> :<C-u>Denite
  #       \ -cursor-pos=`tabpagenr()-1` deol:zsh<CR>
  # nnoremap <silent> <C-k> :<C-u>Denite change jump<CR>
  # nnoremap <silent> <C-h> :<C-u>DeniteCursorWord help<CR>
  # nnoremap <silent> [Space]gs :<C-u>Denite gitstatus<CR>
  # nnoremap <silent> ;;
  #       \ :<C-u>Denite command command_history<CR>

[plugins.ftplugin]
denite = '''
" Define mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> sp
  \ denite#do_map('do_action', 'split')
  nnoremap <silent><buffer><expr> vs
  \ denite#do_map('do_action', 'vsplit')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> <C-C>
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
endfunction
'''

[[plugins]]
repo = 'Jagua/vim-denite-ghq'


[[plugins]]
repo = 'Shougo/neomru.vim'
depends = 'denite.nvim'
on_path = '.*'

[[plugins]]
repo = 'Shougo/neoyank.vim'
depends = 'denite.nvim'
on_event = 'TextYankPost'

[[plugins]]
repo = 'raghur/fruzzy'
on_source = ['denite.nvim']
hook_source = '''
  let g:fruzzy#sortonempty = 0
  let g:fruzzy#usenative = 1
'''
hook_post_update = 'call fruzzy#install()'

