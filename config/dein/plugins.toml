[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'

[[plugins]]
repo = 'Shougo/denite.nvim'

[[plugins]]
repo = 'neoclide/denite-git'

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
nnoremap <silent>   ;ff
\ :<C-u>Defx -listed -resume -buffer-name=tab`tabpagenr()`<CR>

autocmd FileType defx call s:defx_my_settings()
	function! s:defx_my_settings() abort
	  " Define mappings
	  nnoremap <silent><buffer><expr> <CR>
	  \ defx#do_action('open')
	  nnoremap <silent><buffer><expr> l
	  \ defx#do_action('open')
	  nnoremap <silent><buffer><expr> E
	  \ defx#do_action('open', 'vsplit')
	  nnoremap <silent><buffer><expr> P
	  \ defx#do_action('open', 'pedit')
	  nnoremap <silent><buffer><expr> K
	  \ defx#do_action('new_directory')
	  nnoremap <silent><buffer><expr> N
	  \ defx#do_action('new_file')
	  nnoremap <silent><buffer><expr> d
	  \ defx#do_action('remove')
	  nnoremap <silent><buffer><expr> r
	  \ defx#do_action('rename')
	  nnoremap <silent><buffer><expr> h
	  \ defx#do_action('cd', ['..'])
	  nnoremap <silent><buffer><expr> ~
	  \ defx#do_action('cd')
	  nnoremap <silent><buffer><expr> q
	  \ defx#do_action('quit')
	  nnoremap <silent><buffer><expr> <Space>
	  \ defx#do_action('toggle_select') . 'j'
	  nnoremap <silent><buffer><expr> *
	  \ defx#do_action('toggle_select_all')
	  nnoremap <silent><buffer><expr> j
	  \ line('.') == line('$') ? 'gg' : 'j'
	  nnoremap <silent><buffer><expr> k
	  \ line('.') == 1 ? 'G' : 'k'
	  nnoremap <silent><buffer><expr> <C-l>
	  \ defx#do_action('redraw')
	  nnoremap <silent><buffer><expr> <C-g>
	  \ defx#do_action('print')
endfunction
'''
hook_source = '''
call defx#custom#column('mark', {
        \ 'readonly_icon': '✗',
        \ 'selected_icon': '✓',
        \ })
call defx#custom#column('icon', {
        \ 'directory_icon': '▸',
        \ 'opened_icon': '▾',
        \ 'root_icon': ' ',
        \ })
'''

[[plugins]]
repo = 'iyuuya/denite-rails'

[[plugins]]
repo = 'Shougo/neco-vim'

[[plugins]]
repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]] # ステータスライン
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'nixprime/cpsm'
build = 'env PY3=ON ./install.sh'

[[plugins]]
repo = 'edkolev/tmuxline.vim'
hook_add = '''
  let g:tmuxline_preset = {
      \'a'    : '#S',
      \'c'    : ['#(whoami)', '#(uptime | cud -d " " -f 1,2,3)'],
      \'win'  : ['#I', '#W'],
      \'cwin' : ['#I', '#W', '#F'],
      \'x'    : '#(date)',
      \'y'    : ['%R', '%a', '%Y'],
      \'z'    : '#H'}
'''

#
[[plugins]]
repo = 'xolox/vim-session'
[[plugins]]
repo = 'xolox/vim-misc'

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]]
repo = 'szw/vim-tags'
hook_add = '''
  " let g:vim_tags_auto_generate = 1
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
" 行の最初の文字の前にコメント文字をトグル
nmap <Leader>c <Plug>(caw:hatpos:toggle)
vmap <Leader>c <Plug>(caw:hatpos:toggle)
" 行頭にコメントをトグル
nmap <Leader>, <Plug>(caw:zeropos:toggle)
vmap <Leader>, <Plug>(caw:zeropos:toggle)
'''

[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'yuku-t/vim-ref-ri'

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
  let NERDSpaceDelims = 1
  nmap ,, <Plug>NERDCommenterToggle
  vmap ,, <Plug>NERDCommenterToggle
'''

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'lambdalisue/gina.vim'

# ctrlp
#[[plugins]]
#repo = 'ctrlpvim/ctrlp.vim'
#hook_add = '''
#  let g:ctrlp_custom_ignore = 'log\|tags\|node_modules\|plugins\|platforms\|\.git'
#  let g:ctrlp_map = '<c-p>'
#  let g:ctrlp_cmd = 'CtrlPLastMode'
#  let g:ctrlp_extensions = ['buffertag', 'tag', 'line', 'dir', 'tmux']
#'''

[[plugins]]
repo = 'lucidstack/ctrlp-tmux.vim'

# git
[[plugins]]
repo = 'airblade/vim-gitgutter'

# Lang
[[plugins]] # yajs (ES6 syntax)
repo = 'othree/yajs.vim'

[[plugins]] # Elixir
repo = 'elixir-lang/vim-elixir'
#[[plugins]]
#repo = 'archSeer/elixir.nvim'

[[plugins]] # Elixir-mix
repo = 'mattreduce/vim-mix'

[[plugins]] # Elixir-extest,Amitra
repo = 'BjRo/vim-extest'

[[plugins]] # Elixir-phoenix
repo = 'avdgaag/vim-phoenix'

[[plugins]]
repo = 'slim-template/vim-slim'

[[plugins]] # Alchemist.vim (Elixir)
repo = 'slashmili/alchemist.vim'
hook_add = '''
  let g:alchemist#elixir_erlang_src = "/usr/local/share/src"
  let g:alchemist_tag_map = '<C-]>'
  let g:alchemist_iex_term_size = 15
  let g:alchemist_iex_term_split = 'split'
'''


# [[plugins]] # watchdogs
# repo = 'osyo-manga/vim-watchdogs'

[[plugins]] # yaml
repo = 'avakhov/vim-yaml'


# [[plugins]] # ctags
# repo = 'soramugi/auto-ctags.vim'
[[plugins]]
repo = 'jsfaint/gen_tags.vim'
hook_add = '''
let g:gen_tags#ctags_auto_gen = 1
let g:gen_tags#gtags_auto_gen = 1
'''

[[plugins]]
repo = 'ozelentok/denite-gtags'
hook_add = '''
    " Prefix key
    nmap [denite] <Nop>
    map <C-j> [denite]
    " Keymap
    " nmap <silent> [denite]<C-D> :Denite -buffer-name=gtags_completion gtags_completion<cr>
'''


[[plugins]] # Haml
repo  = 'tpope/vim-haml'
on_ft = 'haml'

# html/css
[[plugins]] # Html5
repo  = 'othree/html5.vim'
hook_add = '''
  let g:html5_event_handler_attributes_complete = 1
  let g:html5_rdfa_attributes_complete = 1
  let g:html5_microdata_attributes_complete = 1
  let g:html5_aria_attributes_complete = 1
'''

[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'lambdatoast/elm.vim'

[[plugins]]
repo = 'isRuslan/vim-es6'

[[plugins]]
repo = 'ap/vim-css-color'
[[plugins]] # color check hexadecimal
repo = "gko/vim-coloresque"

[[plugins]] # json
repo = 'elzr/vim-json'

[[plugins]] # indenthighlight
repo = 'Yggdroot/indentLine'

[[plugins]] # Toml
repo  = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # Markdown
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown','mkd']
hook_add = '''
    let g:vim_markdown_frontmatter = 1
    let g:vim_markdown_math = 1
'''

[[plugins]] # previm
repo = 'kannokanno/previm'

[[plugins]] # open-browser
repo = 'tyru/open-browser.vim'

[[plugins]] # Golang
repo = 'fatih/vim-go'
on_ft = 'go'

[[plugins]]
repo = 'nsf/gocode'

[[plugins]] #ruby
repo = 'vim-ruby/vim-ruby'
[[plugins]]
repo = 'tpope/vim-rails.git'
[[plugins]]
repo = 'mattn/webapi-vim'
#[[plugins]]
#repo = 'fishbullet/deoplete-ruby'
[[plugins]]
repo = 'tbodt/deoplete-tabnine'
on_ft = 'ruby,go,perl,python'
on_event = ['InsertEnter']
build = './install.sh'

[[plugins]]
repo = 'taku-o/vim-copypath'

# [[plugins]]
# repo = 'uplus/deoplete-solargraph'
#[[plugins]]
#repo = 'zchee/deoplete-go'
#on_event = 'InsertEnter'
#on_ft = 'go'
#
#[[plugins]]
#repo = 'zchee/deoplete-jedi'
#on_ft = 'python'
#hook_source = '''
#let g:deoplete#sources#jedi#enable_typeinfo = 0
#'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
hook_add = '''
  let g:LanguageClient_serverCommands = {
    \ 'ruby': ['solargraph', 'stdio'],
  \}
'''

[[plugins]]
repo = 'junegunn/fzf'

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

# syntax
[[plugins]]
repo = 'posva/vim-vue'

[[plugins]]
repo = 'kchmck/vim-coffee-script'

[[plugins]] # pathogen
repo = 'tpope/vim-pathogen'

[[plugins]]
repo = 'w0rp/ale'
hook_add= '''
  let g:ale_sign_column_always = 1
  let g:ale_linters = {
      \ 'html': [],
      \ 'css': ['stylelint'],
      \ 'javascript': ['eslint'],
      \ 'vue': ['eslint']
      \ }
  let g:ale_linter_aliases = {'vue': 'css'}
  let g:ale_fixers = {
  \   'javascript': ['eslint'],
  \   'ruby': ['rubocop'],
  \}
  let g:ale_fix_on_save = 1
  let g:ale_completion_enabled = 1
  let g:airline#extensions#ale#enabled = 1
  let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
'''

#[[plugins]] #syntastic
#repo = 'vim-syntastic/syntastic'
#hook_add = '''
#  let g:syntastic_mode_map = { 'mode': 'passive',
#            \ 'active_filetypes': ['ruby'] }
#  let g:syntastic_ruby_checkers = ['rubocop']
#'''

# tree
[[plugins]]
repo = 'scrooloose/nerdtree'

[[plugins]]
repo = 'mortonfox/nerdtree-iterm'
hook_add = '''
  let g:nerdtree_iterm_iterm_version = 3
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]] # run commands quickly
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  let g:EasyMotion_do_mapping = 0 "Disable default mappings
  let g:EasyMotion_use_migemo = 1
  let g:EasyMotion_smartcase = 1
  " let g:EasyMotion_move_highlight = 0

  map s <Plug>(easymotion-overwin-f2)

  map <silent> / <Plug>(easymotion-sn)
  omap / <Plug>(easymotion-tn)

  " These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
  " Without these mappings, `n` & `N` works fine. (These mappings just provide
  " different highlight method and have some other features )
  map  n <Plug>(easymotion-next)
  map  N <Plug>(easymotion-prev)
'''

[[plugins]]
repo = 'ruby-formatter/rufo-vim'
hook_add = '''
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'
hook_add = '''

'''

# Keymap
# [[plugins]]
# repo = 'rhysd/accelerated-jk'
# # on_map = {n = '<Plug>'}
# hook_add = '''
#   nmap <silent>j <Plug>(accelerated_jk_gj)
#   nmap <silent>k <Plug>(accelerated_jk_gk)
# '''

# Howm
[[plugins]]
repo = 'fuenor/qfixhowm'
hook_add = '''
" キーマップリーダー
let QFixHowm_Key = 'g'

" howm_dirはファイルを保存したいディレクトリを設定
let howm_dir             = '~/howm'
let howm_filename        = '%Y/%m/%Y-%m-%d-%H%M%S.txt'
let howm_fileencoding    = 'utf-8'
let howm_fileformat      = 'unix'
'''

# SKK
[[plugins]]
repo = 'tyru/eskk.vim'
hook_add = '''
  let g:eskk#directory = "~/.eskk"
  let g:eskk#dictionary = { 'path': "~/.skk-jisyo", 'sorted': 0, 'encoding': 'utf-8', }
  let g:eskk#large_dictionary = { 'path': "~/.eskk/SKK-JISYO.L", 'sorted': 1, 'encoding': 'euc-jp', }
  let g:eskk#enable_completion = 1
'''

# vimdiff
[[plugins]]
repo = 'rickhowe/diffchar.vim'
hoook_add = '''
let g:DiffUnit = 'Char' " any single character
let g:DiffColors = 3 " 16 colors in fixed order
'''

# Colors
[[plugins]] # Template engine vim color scheme
repo = 'cocopon/pgmnt.vim'

[[plugins]] # iceberg
repo = 'cocopon/iceberg.vim'
[[plugins]] # hybrid
repo = 'w0ng/vim-hybrid'
[[plugins]] # solarized
repo = 'altercation/vim-colors-solarized'
[[plugins]] # monokai
repo = 'sickill/vim-monokai'

